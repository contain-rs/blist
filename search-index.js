var searchIndex = {};
searchIndex['blist'] = {"items":[[0,"","blist","A deque implemented as a hybrid linked-list-of-arrays",null,null],[3,"BList","","A skeleton implementation of a BList, based on the [Space-Efficient Linked List]\n(http://opendatastructures.org/ods-python/3_3_SEList_Space_Efficient_.html) described in\nOpen Data Structures.",null,null],[3,"Iter","","A by-ref iterator for a BList",null,null],[3,"IterMut","","A by-mut-ref iterator for a BList",null,null],[3,"IntoIter","","A by-value iterator for a BList",null,null],[3,"Trav","","",null,null],[3,"TravMut","","",null,null],[3,"IntoTrav","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"blist"}],"output":{"name":"blist"}}],[11,"new","","Creates a new BList with a reasonable choice for B.",0,{"inputs":[{"name":"blist"}],"output":{"name":"blist"}}],[11,"with_b","","Creates a new BList with the specified B.",0,{"inputs":[{"name":"blist"},{"name":"usize"}],"output":{"name":"blist"}}],[11,"push_back","","Inserts the element at the back of the list.",0,{"inputs":[{"name":"blist"},{"name":"t"}],"output":null}],[11,"push_front","","Inserts the element at the front of the list.",0,{"inputs":[{"name":"blist"},{"name":"t"}],"output":null}],[11,"pop_back","","Removes and returns an element off the back of the list. Returns None if empty.",0,{"inputs":[{"name":"blist"}],"output":{"name":"option"}}],[11,"pop_front","","Removes and returns an element off the front of the list. Returns None if empty.",0,{"inputs":[{"name":"blist"}],"output":{"name":"option"}}],[11,"front","","Gets an immutable reference to the first element in the list.",0,{"inputs":[{"name":"blist"}],"output":{"name":"option"}}],[11,"back","","Gets an immutable reference to the last element in the list.",0,{"inputs":[{"name":"blist"}],"output":{"name":"option"}}],[11,"front_mut","","Gets a mutable reference to the first element in the list.",0,{"inputs":[{"name":"blist"}],"output":{"name":"option"}}],[11,"back_mut","","Gets a mutable reference to the last element in the list.",0,{"inputs":[{"name":"blist"}],"output":{"name":"option"}}],[11,"len","","Gets the number of elements in the list.",0,{"inputs":[{"name":"blist"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the list contains no elements, or `false` otherwise.",0,{"inputs":[{"name":"blist"}],"output":{"name":"bool"}}],[11,"clear","","Drops everything in the list.",0,{"inputs":[{"name":"blist"}],"output":null}],[11,"iter","","Gets a by-reference iterator over the elements in the list.",0,{"inputs":[{"name":"blist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a by-mutable-reference iterator over the elements in the list.",0,{"inputs":[{"name":"blist"}],"output":{"name":"itermut"}}],[11,"into_iter","","Gets a by-value iterator over the elements in the list.",0,{"inputs":[{"name":"blist"}],"output":{"name":"intoiter"}}],[11,"traversal","","",0,{"inputs":[{"name":"blist"}],"output":{"name":"trav"}}],[11,"traversal_mut","","",0,{"inputs":[{"name":"blist"}],"output":{"name":"travmut"}}],[11,"into_traversal","","",0,{"inputs":[{"name":"blist"}],"output":{"name":"intotrav"}}],[11,"append_lazy","","Lazily moves the contents of `other` to the end of `self`, in the sense that it makes no\neffort to preserve the node-size lower-bound invariant. This can have negative effects\non the effeciency of the resulting list, but is otherwise much faster than a proper\ninvariant-preserving `append`.",0,{"inputs":[{"name":"blist"},{"name":"blist"}],"output":null}],[11,"into_iter","","",0,{"inputs":[{"name":"blist"}],"output":{"name":"intoiter"}}],[11,"next","","",1,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",2,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"foreach","","",4,{"inputs":[{"name":"trav"},{"name":"f"}],"output":null}],[11,"foreach","","",5,{"inputs":[{"name":"travmut"},{"name":"f"}],"output":null}],[11,"foreach","","",6,{"inputs":[{"name":"intotrav"},{"name":"f"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"blist"},{"name":"t"}],"output":{"name":"blist"}}],[11,"extend","","",0,{"inputs":[{"name":"blist"},{"name":"t"}],"output":null}],[11,"eq","","",0,{"inputs":[{"name":"blist"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"blist"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"blist"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"blist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,{"inputs":[{"name":"blist"},{"name":"h"}],"output":null}]],"paths":[[3,"BList"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Trav"],[3,"TravMut"],[3,"IntoTrav"]]};
initSearch(searchIndex);
